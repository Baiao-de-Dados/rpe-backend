generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  name       String
  position   String
  mentorId   Int?
  mentor     User?     @relation("Mentor", fields: [mentorId], references: [id])
  mentees    User[]   @relation("Mentor")
  trackId    Int
  track      Track?   @relation(fields: [trackId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastLogged DateTime @updatedAt

  evaluator     Evaluation[]    @relation("Evaluator")
  userRoles     UserRoleLink[]  @relation("UserRoleUser")
  assignedRoles UserRoleLink[]  @relation("AssignedByAdmin")
  projectMember ProjectMember[]
  leaderAssignments LeaderAssignment[]
  managedProjects Project[] @relation("UserToManagedProjects")
  leaderEvaluationAssignments LeaderEvaluationAssignment[] @relation("LeaderEvaluationAssignment")
  collaboratorEvaluationAssignments LeaderEvaluationAssignment[] @relation("CollaboratorEvaluationAssignment")
  managerEvaluations ManagerEvaluation[] @relation("ManagerEvaluations")
  collaboratorEvaluations ManagerEvaluation[] @relation("CollaboratorEvaluations")
  notes      Notes[]
  leaderEvaluations LeaderEvaluation[] @relation("LeaderEvaluations")
  collaboratorLeaderEvaluations LeaderEvaluation[] @relation("CollaboratorLeaderEvaluations")
  evaluations360Received Evaluation360[] @relation("UserToEvaluation360")
  mentoringsReceived     Mentoring[]     @relation("UserToMentoring")
  referencesReceived     Reference[]     @relation("UserToReference")
}

model UserRoleLink {
  userId     Int
  role       UserRole
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  assignedBy Int?

  admin User? @relation("AssignedByAdmin", fields: [assignedBy], references: [id], onDelete: SetNull)
  user  User  @relation("UserRoleUser", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, role])
}

model Pillar {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  criteria Criterion[]
}

model Criterion {
  id          Int      @id @default(autoincrement())
  pillarId    Int
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  pillar                     Pillar                      @relation(fields: [pillarId], references: [id], onDelete: Cascade)
  criterionTrackConfigs      CriterionTrackConfig[]
  criterionTrackCycleConfigs CriterionTrackCycleConfig[]
  autoEvaluationAssignments AutoEvaluationAssignment[]
  managerEvaluationCriterias ManagerEvaluationCriteria[]
}

model CycleConfig {
  id          Int      @id @default(autoincrement())
  name        String // ex: "2025.1", "2025.2"
  description String?
  startDate   DateTime
  endDate     DateTime
  done        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Evaluation Evaluation[]
  criterionTrackCycleConfigs CriterionTrackCycleConfig[]
  leaderEvaluationAssignments LeaderEvaluationAssignment[]
  managerEvaluations ManagerEvaluation[]
  leaderEvaluations LeaderEvaluation[]

  @@unique([name])
}

model Track {
  id   Int    @id @default(autoincrement())
  name String @unique

  criterionTrackConfigs      CriterionTrackConfig[]
  criterionTrackCycleConfigs CriterionTrackCycleConfig[]
  users                      User[]
  evaluations                Evaluation[]
}

model CriterionTrackConfig {
  id          Int      @id @default(autoincrement())
  criterionId Int
  trackId     Int
  weight      Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  criterion Criterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  track     Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([criterionId, trackId])
}

model CriterionTrackCycleConfig {
  id          Int      @id @default(autoincrement())
  cycleId     Int
  trackId     Int
  criterionId Int
  weight      Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cycle     CycleConfig @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  track     Track       @relation(fields: [trackId], references: [id], onDelete: Cascade)
  criterion Criterion   @relation(fields: [criterionId], references: [id], onDelete: Cascade)

  @@unique([cycleId, trackId, criterionId])
}

model Evaluation {
  id            Int              @id @default(autoincrement())
  evaluatorId   Int
  cycleConfigId Int
  trackId       Int?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  evaluator   User        @relation("Evaluator", fields: [evaluatorId], references: [id], onDelete: Cascade)
  cycleConfig CycleConfig @relation(fields: [cycleConfigId], references: [id], onDelete: Cascade)
  track       Track?      @relation(fields: [trackId], references: [id])

  autoEvaluation AutoEvaluation?
  evaluation360  Evaluation360[]
  mentoring      Mentoring?
  reference      Reference[]
  equalization Equalization[]

  @@unique([evaluatorId, cycleConfigId])
}

model AutoEvaluation {
  evaluationId Int        @id
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  rating Float?
  assignments AutoEvaluationAssignment[]
}

model AutoEvaluationAssignment {
  evaluationId  Int
  criterionId   Int
  score         Float
  justification String

  autoEvaluation AutoEvaluation @relation(fields: [evaluationId], references: [evaluationId], onDelete: Cascade)
  criterion      Criterion      @relation(fields: [criterionId], references: [id], onDelete: Cascade)

  @@id([evaluationId, criterionId])
}

model Evaluation360 {
  id            Int        @id @default(autoincrement())
  evaluationId  Int
  evaluation    Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  evaluatedId   Int
  evaluated     User       @relation("UserToEvaluation360", fields: [evaluatedId], references: [id], onDelete: Cascade)

  score         Float
  strengths     String
  improvements  String

  @@unique([evaluationId, evaluatedId])
}

model Mentoring {
  evaluationId Int        @id
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  mentorId     Int
  mentor       User       @relation("UserToMentoring", fields: [mentorId], references: [id], onDelete: Cascade)

  justification String
  score         Float?
}

model Reference {
  id            Int        @id @default(autoincrement())
  evaluationId  Int
  evaluation    Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  collaboratorId Int
  collaborator   User     @relation("UserToReference", fields: [collaboratorId], references: [id], onDelete: Cascade)

  justification String
  createdAt     DateTime @default(now())

  @@unique([evaluationId, collaboratorId])
}
// avaliacao de leader
model LeaderEvaluation {
  id           Int      @id @default(autoincrement())
  leaderId     Int
  collaboratorId Int
  cycleId      Int
  justification String
  score        Float
  strengths    String?
  improvements String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  cycle        CycleConfig @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  leader       User        @relation("LeaderEvaluations", fields: [leaderId], references: [id], onDelete: Cascade)
  collaborator User        @relation("CollaboratorLeaderEvaluations", fields: [collaboratorId], references: [id], onDelete: Cascade)
}
// avaliacao de gestor
model ManagerEvaluation {
  id             Int                        @id @default(autoincrement())
  cycleId        Int
  managerId      Int
  collaboratorId Int
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt

  criterias      ManagerEvaluationCriteria[]

  // Relacionamentos
  cycle          CycleConfig                @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  manager        User                       @relation("ManagerEvaluations", fields: [managerId], references: [id], onDelete: Cascade)
  collaborator   User                       @relation("CollaboratorEvaluations", fields: [collaboratorId], references: [id], onDelete: Cascade)
}

model ManagerEvaluationCriteria {
  id                  Int               @id @default(autoincrement())
  managerEvaluationId Int
  criteriaId          Int
  score               Int
  justification       String

  managerEvaluation   ManagerEvaluation @relation(fields: [managerEvaluationId], references: [id])
  criteria            Criterion         @relation(fields: [criteriaId], references: [id])
}

model Equalization {
  id            Int      @id @default(autoincrement())
  evaluationId  Int
  justification String
  score         Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  managerId   Int      
  manager     User     @relation("UserToManagedProjects", fields: [managerId], references: [id])
  members     ProjectMember[]
  leaderAssignments LeaderAssignment[]
}

model ProjectMember {
  id        Int      @id @default(autoincrement())
  projectId Int
  userId    Int
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
//serve para dar assigment de lider de um projeto para um usuário
model LeaderAssignment {
  id        Int      @id @default(autoincrement())
  projectId Int
  leaderId  Int

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  leader    User     @relation(fields: [leaderId], references: [id], onDelete: Cascade)

  @@unique([projectId, leaderId])
}
// serve par armazenar qual lider vai avaliar quem
model LeaderEvaluationAssignment {
  id            Int      @id @default(autoincrement())
  leaderId      Int
  collaboratorId Int
  cycleId       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  leader      User        @relation("LeaderEvaluationAssignment", fields: [leaderId], references: [id], onDelete: Cascade)
  collaborator User       @relation("CollaboratorEvaluationAssignment", fields: [collaboratorId], references: [id], onDelete: Cascade)
  cycle       CycleConfig @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@unique([collaboratorId, cycleId])
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String // ex: "EXPORT_EVALUATIONS", "LOGIN", etc.
  metadata  Json
  createdAt DateTime @default(now())
}

model Notes {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  notes     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum EvaluationStatus {
  PENDING
  COMPLETED
}

enum UserRole {
  EMPLOYER
  LEADER
  MENTOR
  MANAGER
  RH
  COMMITTEE
  DEVELOPER
  ADMIN
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}
