generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRoleEnum {
    EMPLOYER
    MANAGER
    LEADER
    MENTOR
    RH
    COMMITTEE
    ADMIN
    DEVELOPER
}

model User {
    id           Int          @id @default(autoincrement())
    email        String       @unique
    password     String       @map("password_hash")
    name         String? 
    createdAt    DateTime     @default(now()) @map("created_at")
    updatedAt    DateTime     @updatedAt @map("updated_at")
    roleType     UserRoleEnum @default(EMPLOYER)
    evaluations  Evaluation[]
    userRoles    UserRole[]

    mentoringAsEvaluator   Mentoring[]    @relation("Mentor")
    mentoringAsEvaluated   Mentoring[]    @relation("Mentored")

    referenceAsEvaluator   Reference[]    @relation("ReferenceEvaluator")
    referenceAsEvaluated   Reference[]    @relation("ReferenceEvaluated")

    evaluation360AsEvaluator  Evaluation360[] @relation("Evaluation360Evaluator")
    evaluation360AsEvaluated  Evaluation360[] @relation("Evaluation360Evaluated")

}

model Role {
    id          Int        @id @default(autoincrement())
    name        String     @unique
    description String?

    userRoles   UserRole[]

    @@map("roles")
}

model UserRole {
    userId     Int
    roleId     Int
    assignedAt DateTime   @default(now()) @map("assigned_at")

    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@id([userId, roleId])
    @@map("user_roles")
}

model Evaluation {
    id             Int              @id @default(autoincrement())
    period         String
    createdAt      DateTime         @default(now())
    grade          Float?

    userId         Int
    user           User             @relation(fields: [userId], references: [id])

    mentoring      Mentoring?
    autoEvaluation AutoEvaluation?
    evaluation360  Evaluation360?
    references     Reference?

}

model Mentoring {
    id            Int        @id @default(autoincrement())
    evaluationId  Int        @unique
    evaluatorId   Int
    evaluatedId   Int
    justification String?

    evaluation    Evaluation @relation(fields: [evaluationId], references: [id])
    evaluator     User       @relation("Mentor", fields: [evaluatorId], references: [id])
    evaluated     User       @relation("Mentored", fields: [evaluatedId], references: [id])

}

model AutoEvaluation {
    id                  Int                   @id @default(autoincrement())
    evaluationId        Int                   @unique
    justification       String?

    evaluation          Evaluation            @relation(fields: [evaluationId], references: [id])
    criteriaAssignments CriteriaAssignment[]

}

model Evaluation360 {
    id            Int         @id @default(autoincrement())
    evaluationId  Int         @unique
    evaluatorId   Int
    evaluatedId   Int
    strengths     String?
    improvements  String?

    evaluation    Evaluation  @relation(fields: [evaluationId], references: [id])
    evaluator     User        @relation("Evaluation360Evaluator", fields: [evaluatorId], references: [id])
    evaluated     User        @relation("Evaluation360Evaluated", fields: [evaluatedId], references: [id])

}

model Pillar {
    id         Int       @id @default(autoincrement())
    name       String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    criteria  Criterion[]
}

model Criterion {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    weight      Float?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    pillarId    Int
    pillar      Pillar    @relation(fields: [pillarId], references: [id])

    criteriaAssignments CriteriaAssignment[]
}

model CriteriaAssignment {
    autoEvaluationId Int
    criterionId      Int

    autoEvaluation   AutoEvaluation @relation(fields: [autoEvaluationId], references: [id])
    criterion        Criterion      @relation(fields: [criterionId], references: [id])

    @@id([autoEvaluationId, criterionId])
}

model Tag {
    id            Int       @id @default(autoincrement())
    name          String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    tagReferences TagReference[]
}

model Reference {
    id            Int       @id @default(autoincrement())
    evaluatorId   Int
    evaluatedId   Int
    justification String?
    createdAt     DateTime  @default(now())
    cycle         String?
    evaluationId  Int?      @unique

    evaluator     User      @relation("ReferenceEvaluator", fields: [evaluatorId], references: [id])
    evaluated     User      @relation("ReferenceEvaluated", fields: [evaluatedId], references: [id])
    evaluation    Evaluation? @relation(fields: [evaluationId], references: [id])

    tagReferences TagReference[]
}

model TagReference {
    tagId       Int
    referenceId Int

    tag         Tag       @relation(fields: [tagId], references: [id])
    reference   Reference @relation(fields: [referenceId], references: [id])

    @@id([tagId, referenceId])
}