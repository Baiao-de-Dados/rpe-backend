generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int           @id @default(autoincrement())
    email       String        @unique
    password    String
    name        String?
    role        UserRole
    unit        String?
    track       String?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    evaluator Evaluation[] @relation("Evaluator")
    evaluatee Evaluation[] @relation("Evaluatee")
    feedbacks   Feedback[]
    referencesFrom Reference[] @relation("RefFrom")
    referencesTo Reference[] @relation("RefTo")
    okrs        Okr[]
    pdps        Pdi[]
}

model Evaluation {
    id             Int       @id @default(autoincrement())
    type           EvaluationType // AUTO | PEER | LEADER
    evaluatorId    Int
    evaluateeId    Int
    cycle          Int
    justification  String
    score          Int
    createdAt      DateTime  @default(now())

    evaluator      User      @relation("Evaluator", fields: [evaluatorId], references: [id])
    evaluatee      User      @relation("Evaluatee", fields: [evaluateeId], references: [id])
}

model Reference {
    id          Int       @id @default(autoincrement())
    fromId      Int
    toId        Int
    tags        String[]
    comment     String
    createdAt   DateTime  @default(now())

    from        User      @relation("RefFrom", fields: [fromId], references: [id])
    to          User      @relation("RefTo", fields: [toId], references: [id])
}

model Feedback {
    id          Int       @id @default(autoincrement())
    userId      Int
    text        String
    sourceType  FeedbackSource // TEXT | AUDIO_TRANSCRIBED
    createdAt   DateTime  @default(now())

    user        User      @relation(fields: [userId], references: [id])
}

model Okr {
    id          Int       @id @default(autoincrement())
    userId      Int
    objective   String
    keyResults  String[]
    progress    Float
    cycle       Int
    createdAt   DateTime  @default(now())

    user        User      @relation(fields: [userId], references: [id])
}

model Pdi {
    id          Int       @id @default(autoincrement())
    userId      Int
    title       String
    description String
    status      String     // OPEN | IN_PROGRESS | DONE
    createdAt   DateTime   @default(now())

    user        User       @relation(fields: [userId], references: [id])
}

model Log {
    id          Int       @id @default(autoincrement())
    userId      Int?
    action      String     // ex: "EXPORT_EVALUATIONS", "LOGIN", etc.
    metadata    Json
    createdAt   DateTime   @default(now())
}

enum EvaluationType {
    AUTO
    PEER
    LEADER
}

enum FeedbackSource {
    TEXT
    AUDIO_TRANSCRIBED
}

enum UserRole {
    COLLABORATOR
    RH
    MANAGER
    COMMITTEE
    ADMIN
    DEVELOPER
}