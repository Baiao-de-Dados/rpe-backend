generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              Int             @id @default(autoincrement())
    email           String          @unique
    password        String
    name            String?
    unit            String?
    track           String?
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    lastLogged      DateTime        @updatedAt

    evaluator       Evaluation[]    @relation("Evaluator")
    evaluatee       Evaluation[]    @relation("Evaluatee")
    feedbacks       Feedback[]
    referencesFrom  Reference[]     @relation("RefFrom")
    referencesTo    Reference[]     @relation("RefTo")
    okrs            Okr[]
    pdps            Pdi[]
    userRoles       UserRoleLink[] @relation("UserRoleUser")
    assignedRoles   UserRoleLink[] @relation("AssignedByAdmin")
    projectMember   ProjectMember[]
}

model UserRoleLink {
    userId       Int
    role         UserRole
    isActive     Boolean   @default(true)
    createdAt    DateTime  @default(now())
    assignedBy   Int

    admin        User?     @relation("AssignedByAdmin", fields: [assignedBy], references: [id])
    user         User      @relation("UserRoleUser", fields: [userId], references: [id])

    @@id([userId, role])
}

model Evaluation {
    id             Int       @id @default(autoincrement())
    type           EvaluationType // AUTO | PEER | LEADER
    evaluatorId    Int
    evaluateeId    Int
    cycle          Int
    justification  String
    score          Int
    createdAt      DateTime  @default(now())

    evaluator      User      @relation("Evaluator", fields: [evaluatorId], references: [id])
    evaluatee      User      @relation("Evaluatee", fields: [evaluateeId], references: [id])

    CriteriaAssignment CriteriaAssignment[]

    @@index([type], map: "EvaluationTypeIndex")
}

model Project {
    id          Int             @id @default(autoincrement())
    name        String
    description String?
    status      ProjectStatus   @default(ACTIVE)
    startDate   DateTime?
    endDate     DateTime?
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    members     ProjectMember[]
}

model ProjectMember {
    id          Int         @id @default(autoincrement())
    projectId   Int
    userId      Int
    role        ProjectRole
    startDate   DateTime    @default(now())
    endDate     DateTime?
    createdAt   DateTime    @default(now())

    project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pillar {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime  @default(now())

    criteria    Criterion[]
}

model Criterion {
    id          Int       @id @default(autoincrement())
    pillarId    Int
    name        String
    description String?
    weight      Float
    createdAt   DateTime  @default(now())

    pillar      Pillar    @relation(fields: [pillarId], references: [id], onDelete: Cascade)
    CriteriaAssignment CriteriaAssignment[]
}

model CriteriaAssignment {
    autoEvaluationID Int
    criterionId     Int
    note          Float
    justification String

    autoEvaluation  Evaluation @relation(fields: [autoEvaluationID], references: [id])
    criterion      Criterion  @relation(fields: [criterionId], references: [id])

    @@id([autoEvaluationID, criterionId])
}

model Tag {
    id          Int         @id @default(autoincrement())
    name        String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    tagReferences TagReference[]
}

model Reference {
    id          Int       @id @default(autoincrement())
    fromId      Int
    toId        Int
    tags        String[]
    comment     String
    createdAt   DateTime  @default(now())

    from        User      @relation("RefFrom", fields: [fromId], references: [id])
    to          User      @relation("RefTo", fields: [toId], references: [id])

    tagReferences TagReference[]
}


model TagReference {
    tagId   Int
    referenceId Int
    tag         Tag         @relation(fields: [tagId], references: [id])
    reference   Reference   @relation(fields: [referenceId], references: [id])

    @@id([tagId, referenceId])
}

model Feedback {
    id          Int       @id @default(autoincrement())
    userId      Int
    text        String
    sourceType  FeedbackSource // TEXT | AUDIO_TRANSCRIBED
    createdAt   DateTime  @default(now())

    user        User      @relation(fields: [userId], references: [id])
}

model Okr {
    id          Int       @id @default(autoincrement())
    userId      Int
    objective   String
    keyResults  String[]
    progress    Float
    cycle       Int
    createdAt   DateTime  @default(now())

    user        User      @relation(fields: [userId], references: [id])
}

model Pdi {
    id          Int       @id @default(autoincrement())
    userId      Int
    title       String
    description String
    status      String     // OPEN | IN_PROGRESS | DONE
    createdAt   DateTime   @default(now())

    user        User       @relation(fields: [userId], references: [id])
}

model Log {
    id          Int       @id @default(autoincrement())
    userId      Int?
    action      String     // ex: "EXPORT_EVALUATIONS", "LOGIN", etc.
    metadata    Json
    createdAt   DateTime   @default(now())
}

enum EvaluationType {
    AUTOEVALUATION
    PEER_360
    LEADER
    MENTOR
}

enum FeedbackSource {
    TEXT
    AUDIO_TRANSCRIBED
}

enum UserRole {
    EMPLOYER
    LEADER
    MENTOR
    MANAGER
    RH
    COMMITTEE
    DEVELOPER
    ADMIN
}

enum ProjectStatus {
    ACTIVE
    INACTIVE
    COMPLETED
    CANCELLED
}

enum ProjectRole {
    DEVELOPER
    LEADER
    MANAGER
    ANALYST
    TESTER
    DESIGNER
    ARCHITECT
    BUSINESSMAN
}
