generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  name       String
  position   String
  mentorId   Int
  mentor     User     @relation("Mentor", fields: [mentorId], references: [id])
  mentees    User[]   @relation("Mentor")
  trackId    Int
  track      Track?   @relation(fields: [trackId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastLogged DateTime @updatedAt

  evaluator     Evaluation[]    @relation("Evaluator")
  evaluatee     Evaluation[]    @relation("Evaluatee")
  userRoles     UserRoleLink[]  @relation("UserRoleUser")
  assignedRoles UserRoleLink[]  @relation("AssignedByAdmin")
  projectMember ProjectMember[]
}

model UserRoleLink {
  userId     Int
  role       UserRole
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  assignedBy Int?

  admin User? @relation("AssignedByAdmin", fields: [assignedBy], references: [id], onDelete: SetNull)
  user  User  @relation("UserRoleUser", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, role])
}

model Pillar {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  createdAt   DateTime @default(now())

  criteria     Criterion[]
}



model Criterion {
  id          Int      @id @default(autoincrement())
  pillarId    Int
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  pillar             Pillar                 @relation(fields: [pillarId], references: [id], onDelete: Cascade)
  criterionTrackConfigs CriterionTrackConfig[]
  criterionTrackCycleConfigs CriterionTrackCycleConfig[]
  autoEvaluationAssignments AutoEvaluationAssignment[]
}


model CycleConfig {
  id          Int      @id @default(autoincrement())
  name        String // ex: "2025.1", "2025.2"
  description String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Evaluation       Evaluation[]

  criterionTrackCycleConfigs CriterionTrackCycleConfig[]

  @@unique([name])
}


model Track {
  id    Int    @id @default(autoincrement())
  name  String @unique

  criterionTrackConfigs CriterionTrackConfig[]
  criterionTrackCycleConfigs CriterionTrackCycleConfig[]
  users User[]
  evaluations Evaluation[]
}

model CriterionTrackConfig {
  id          Int      @id @default(autoincrement())
  criterionId Int
  trackId     Int
  weight      Int    @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  criterion Criterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  track     Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([criterionId, trackId])
}

model CriterionTrackCycleConfig {
  id          Int      @id @default(autoincrement())
  cycleId     Int
  trackId     Int
  criterionId Int
  weight      Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cycle     CycleConfig @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  track     Track       @relation(fields: [trackId], references: [id], onDelete: Cascade)
  criterion Criterion   @relation(fields: [criterionId], references: [id], onDelete: Cascade)

  @@unique([cycleId, trackId, criterionId])
}


model Evaluation {
  id            Int              @id @default(autoincrement())
  evaluatorId   Int
  evaluateeId   Int
  cycleConfigId Int
  trackId       Int?
  status        EvaluationStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  evaluator   User        @relation("Evaluator", fields: [evaluatorId], references: [id], onDelete: Cascade)
  evaluatee   User        @relation("Evaluatee", fields: [evaluateeId], references: [id], onDelete: Cascade)
  cycleConfig CycleConfig @relation(fields: [cycleConfigId], references: [id], onDelete: Cascade)
  track       Track?      @relation(fields: [trackId], references: [id])

  autoEvaluation AutoEvaluation?
  evaluation360  Evaluation360?
  mentoring      Mentoring?
  reference      Reference?
}

model AutoEvaluation {
  evaluationId Int        @id
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  assignments AutoEvaluationAssignment[]
}

model AutoEvaluationAssignment {
  evaluationId  Int
  criterionId   Int
  score         Float
  justification String

  autoEvaluation AutoEvaluation @relation(fields: [evaluationId], references: [evaluationId], onDelete: Cascade)
  criterion      Criterion      @relation(fields: [criterionId], references: [id], onDelete: Cascade)

  @@id([evaluationId, criterionId])
}

model Evaluation360 {
  evaluationId Int        @id
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  justification String
  score         Float?
  strengths     String?
  improvements  String?
}

model Mentoring {
  evaluationId Int        @id
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  justification String
  score         Float?
}

model Reference {
  evaluationId Int        @id
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  justification String
  createdAt     DateTime @default(now())

  @@map("Reference")
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  members ProjectMember[]
}

model ProjectMember {
  id        Int       @id @default(autoincrement())
  projectId Int
  userId    Int
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String // ex: "EXPORT_EVALUATIONS", "LOGIN", etc.
  metadata  Json
  createdAt DateTime @default(now())
}

enum EvaluationStatus {
  PENDING
  COMPLETED
}

enum UserRole {
  EMPLOYER
  LEADER
  MENTOR
  MANAGER
  RH
  COMMITTEE
  DEVELOPER
  ADMIN
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}
