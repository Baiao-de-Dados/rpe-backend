import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';
import * as crypto from 'crypto';

const prisma = new PrismaClient();

// Simular a mesma l√≥gica do EncryptionService
const ALGORITHM = 'aes-256-cbc';
const IV_LENGTH = 16;

const SECRET = process.env.ENCRYPTION_KEY;
if (!SECRET) {
    throw new Error('ENCRYPTION_KEY environment variable is not set');
}
const KEY = crypto.createHash('sha256').update(SECRET).digest();

function encrypt(text: string): string {
    const iv = crypto.randomBytes(IV_LENGTH);
    const cipher = crypto.createCipheriv(ALGORITHM, KEY, iv);
    let encrypted = cipher.update(text, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    return iv.toString('hex') + ':' + encrypted;
}

async function main() {
    console.log('üå± Iniciando seed do banco de dados...');

    // Hash das senhas
    const hashedPassword = await bcrypt.hash('senha123', 10);

    // Criptografar emails
    const encryptedEmailRH = encrypt('rh@teste.com');
    const encryptedEmailFuncionario = encrypt('funcionario@teste.com');
    const encryptedEmailLider = encrypt('lider@teste.com');
    const encryptedEmailMentor = encrypt('mentor@teste.com');

    console.log('üë• Criando usu√°rios...');

    // Usu√°rio RH
    await prisma.user.create({
        data: {
            email: encryptedEmailRH,
            password: hashedPassword,
            name: 'RH Teste',
            track: 'RH',
            userRoles: {
                create: [{ role: 'RH' }],
            },
        },
    });

    // Usu√°rio Funcion√°rio
    const userFuncionario = await prisma.user.create({
        data: {
            email: encryptedEmailFuncionario,
            password: hashedPassword,
            name: 'Jo√£o Silva',
            track: 'Backend',
            userRoles: {
                create: [{ role: 'EMPLOYER' }],
            },
        },
    });

    // Usu√°rio L√≠der
    const userLider = await prisma.user.create({
        data: {
            email: encryptedEmailLider,
            password: hashedPassword,
            name: 'Maria Santos',
            track: 'Backend',
            userRoles: {
                create: [{ role: 'LEADER' }],
            },
        },
    });

    // Usu√°rio Mentor
    const userMentor = await prisma.user.create({
        data: {
            email: encryptedEmailMentor,
            password: hashedPassword,
            name: 'Pedro Costa',
            track: 'Backend',
            userRoles: {
                create: [{ role: 'MENTOR' }],
            },
        },
    });

    console.log('üèóÔ∏è Criando pilares...');

    // Pilares
    const pilarTecnico = await prisma.pillar.create({
        data: {
            name: 'T√©cnico',
            description: 'Avalia√ß√£o de compet√™ncias t√©cnicas e conhecimentos espec√≠ficos',
        },
    });

    const pilarComportamental = await prisma.pillar.create({
        data: {
            name: 'Comportamental',
            description: 'Avalia√ß√£o de soft skills e comportamentos no ambiente de trabalho',
        },
    });

    const pilarLideranca = await prisma.pillar.create({
        data: {
            name: 'Lideran√ßa',
            description: 'Avalia√ß√£o de compet√™ncias de lideran√ßa e gest√£o',
        },
    });

    console.log('üìã Criando crit√©rios...');

    // Crit√©rios T√©cnicos
    const criterioQualidadeCodigo = await prisma.criterion.create({
        data: {
            name: 'Qualidade do C√≥digo',
            description: 'Avalia a qualidade, legibilidade e manutenibilidade do c√≥digo produzido',
            weight: 1.0,
            pillarId: pilarTecnico.id,
        },
    });

    const criterioDocumentacao = await prisma.criterion.create({
        data: {
            name: 'Documenta√ß√£o',
            description: 'Avalia a qualidade e completude da documenta√ß√£o t√©cnica',
            weight: 1.0,
            pillarId: pilarTecnico.id,
        },
    });

    const criterioArquitetura = await prisma.criterion.create({
        data: {
            name: 'Arquitetura e Design',
            description: 'Avalia a capacidade de criar solu√ß√µes arquiteturais adequadas',
            weight: 1.0,
            pillarId: pilarTecnico.id,
        },
    });

    // Crit√©rios Comportamentais
    const criterioTrabalhoEquipe = await prisma.criterion.create({
        data: {
            name: 'Trabalho em Equipe',
            description: 'Avalia a colabora√ß√£o e contribui√ß√£o efetiva no trabalho em equipe',
            weight: 1.0,
            pillarId: pilarComportamental.id,
        },
    });

    const criterioComunicacao = await prisma.criterion.create({
        data: {
            name: 'Comunica√ß√£o',
            description: 'Avalia a clareza e efic√°cia na comunica√ß√£o oral e escrita',
            weight: 1.0,
            pillarId: pilarComportamental.id,
        },
    });

    const criterioProatividade = await prisma.criterion.create({
        data: {
            name: 'Proatividade',
            description: 'Avalia a iniciativa e busca por melhorias cont√≠nuas',
            weight: 1.0,
            pillarId: pilarComportamental.id,
        },
    });

    // Crit√©rios de Lideran√ßa
    const criterioGestaoTime = await prisma.criterion.create({
        data: {
            name: 'Gest√£o de Time',
            description: 'Avalia a capacidade de liderar e motivar equipes',
            weight: 1.0,
            pillarId: pilarLideranca.id,
        },
    });

    const criterioTomadaDecisao = await prisma.criterion.create({
        data: {
            name: 'Tomada de Decis√£o',
            description: 'Avalia a capacidade de tomar decis√µes assertivas e respons√°veis',
            weight: 1.0,
            pillarId: pilarLideranca.id,
        },
    });

    console.log('üîÑ Criando configura√ß√£o de ciclo...');

    // Configura√ß√£o do Ciclo 2025.1
    const ciclo2025_1 = await prisma.cycleConfig.create({
        data: {
            name: '2025.1',
            description: 'Ciclo de avalia√ß√£o 2025.1 - Primeiro semestre',
            startDate: new Date('2025-01-01'),
            endDate: new Date('2025-06-30'),
            isActive: true,
        },
    });

    // Configura√ß√£o dos Pilares no Ciclo
    await prisma.pillarCycleConfig.createMany({
        data: [
            {
                cycleId: ciclo2025_1.id,
                pillarId: pilarTecnico.id,
                isActive: true,
                weight: 1.0,
            },
            {
                cycleId: ciclo2025_1.id,
                pillarId: pilarComportamental.id,
                isActive: true,
                weight: 1.0,
            },
            {
                cycleId: ciclo2025_1.id,
                pillarId: pilarLideranca.id,
                isActive: false, // Pilar de lideran√ßa inativo neste ciclo
                weight: 0.0,
            },
        ],
    });

    // Configura√ß√£o dos Crit√©rios no Ciclo
    await prisma.criterionCycleConfig.createMany({
        data: [
            // Crit√©rios T√©cnicos (ativos)
            {
                cycleId: ciclo2025_1.id,
                criterionId: criterioQualidadeCodigo.id,
                isActive: true,
                weight: 1.0,
            },
            {
                cycleId: ciclo2025_1.id,
                criterionId: criterioDocumentacao.id,
                isActive: true,
                weight: 1.0,
            },
            {
                cycleId: ciclo2025_1.id,
                criterionId: criterioArquitetura.id,
                isActive: false, // Crit√©rio inativo neste ciclo
                weight: 0.0,
            },
            // Crit√©rios Comportamentais (ativos)
            {
                cycleId: ciclo2025_1.id,
                criterionId: criterioTrabalhoEquipe.id,
                isActive: true,
                weight: 1.0,
            },
            {
                cycleId: ciclo2025_1.id,
                criterionId: criterioComunicacao.id,
                isActive: true,
                weight: 1.0,
            },
            {
                cycleId: ciclo2025_1.id,
                criterionId: criterioProatividade.id,
                isActive: false, // Crit√©rio inativo neste ciclo
                weight: 0.0,
            },
            // Crit√©rios de Lideran√ßa (inativos - pilar inativo)
            {
                cycleId: ciclo2025_1.id,
                criterionId: criterioGestaoTime.id,
                isActive: false,
                weight: 0.0,
            },
            {
                cycleId: ciclo2025_1.id,
                criterionId: criterioTomadaDecisao.id,
                isActive: false,
                weight: 0.0,
            },
        ],
    });

    console.log('üè∑Ô∏è Criando tags...');

    // Tags
    await prisma.tag.create({ data: { name: 'Backend' } });
    await prisma.tag.create({ data: { name: 'Frontend' } });
    await prisma.tag.create({ data: { name: 'Lideran√ßa' } });
    await prisma.tag.create({ data: { name: 'Comunica√ß√£o' } });

    console.log('üìù Criando refer√™ncias...');

    // Refer√™ncias
    await prisma.reference.create({
        data: {
            fromId: userLider.id,
            toId: userFuncionario.id,
            tags: ['Backend', 'Lideran√ßa'],
            comment: 'Excelente desenvolvedor com grande potencial de lideran√ßa',
        },
    });

    await prisma.reference.create({
        data: {
            fromId: userMentor.id,
            toId: userFuncionario.id,
            tags: ['Backend', 'Comunica√ß√£o'],
            comment: 'Muito bom em explicar conceitos t√©cnicos para a equipe',
        },
    });

    console.log('‚úÖ Seed conclu√≠da com sucesso!');
    console.log('\nüìä Resumo dos dados criados:');
    console.log('üë• Usu√°rios:');
    console.log(`   - RH: rh@teste.com (senha: senha123)`);
    console.log(`   - Funcion√°rio: funcionario@teste.com (senha: senha123)`);
    console.log(`   - L√≠der: lider@teste.com (senha: senha123)`);
    console.log(`   - Mentor: mentor@teste.com (senha: senha123)`);

    console.log('\nüèóÔ∏è Pilares:');
    console.log(`   - T√©cnico (ID: ${pilarTecnico.id}) - ATIVO`);
    console.log(`   - Comportamental (ID: ${pilarComportamental.id}) - ATIVO`);
    console.log(`   - Lideran√ßa (ID: ${pilarLideranca.id}) - INATIVO`);

    console.log('\nüìã Crit√©rios ATIVOS no ciclo 2025.1:');
    console.log(`   - Qualidade do C√≥digo (ID: ${criterioQualidadeCodigo.id})`);
    console.log(`   - Documenta√ß√£o (ID: ${criterioDocumentacao.id})`);
    console.log(`   - Trabalho em Equipe (ID: ${criterioTrabalhoEquipe.id})`);
    console.log(`   - Comunica√ß√£o (ID: ${criterioComunicacao.id})`);

    console.log('\nüìã Crit√©rios INATIVOS no ciclo 2025.1:');
    console.log(`   - Arquitetura e Design (ID: ${criterioArquitetura.id})`);
    console.log(`   - Proatividade (ID: ${criterioProatividade.id})`);
    console.log(`   - Gest√£o de Time (ID: ${criterioGestaoTime.id})`);
    console.log(`   - Tomada de Decis√£o (ID: ${criterioTomadaDecisao.id})`);

    console.log('\nüîÑ Ciclo configurado: 2025.1 (ATIVO)');

    console.log('\nüß™ Para testar:');
    console.log('1. Acesse GET /evaluations/active-criteria para ver crit√©rios ativos');
    console.log('2. Acesse GET /evaluations/active-criteria/grouped para ver agrupados por pilar');
    console.log('3. Tente criar autoavalia√ß√£o com crit√©rios ativos (deve funcionar)');
    console.log('4. Tente criar autoavalia√ß√£o com crit√©rios inativos (deve falhar)');
}

// Executar o seed
(async () => {
    try {
        await main();
    } catch (e) {
        console.error('‚ùå Erro durante o seed:', e);
        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
})();
