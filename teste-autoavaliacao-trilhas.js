const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

async function testeAutoavaliacaoTrilhas() {
    console.log('üß™ TESTE: Autoavalia√ß√£o por Trilha\n');

    try {
        // 1Ô∏è‚É£ Criar admin primeiro
        console.log('1Ô∏è‚É£ Criando admin...');
        try {
            const adminResponse = await axios.post(`${BASE_URL}/auth/setup-admin`);
            console.log('‚úÖ Admin criado:', adminResponse.data.message);
        } catch (error) {
            console.log(
                '‚ö†Ô∏è Admin j√° existe ou erro:',
                error.response?.data?.message || 'Usando admin existente',
            );
        }

        // 2Ô∏è‚É£ Login como admin
        console.log('\n2Ô∏è‚É£ Login como admin...');
        const adminLogin = await axios.post(`${BASE_URL}/auth/login`, {
            email: 'admin@test.com',
            password: 'admin123',
        });
        const adminToken = adminLogin.data.access_token;
        console.log('‚úÖ Login admin OK');

        // 3Ô∏è‚É£ Criar usu√°rio RH
        console.log('\n3Ô∏è‚É£ Criando usu√°rio RH...');
        const rhUser = await axios.post(
            `${BASE_URL}/auth/create-user`,
            {
                email: 'rh@teste.com',
                password: 'senha123',
                name: 'RH Teste',
                roles: ['RH'],
            },
            {
                headers: { Authorization: `Bearer ${adminToken}` },
            },
        );
        console.log('‚úÖ Usu√°rio RH criado:', rhUser.data.email);

        // 4Ô∏è‚É£ Login como RH
        console.log('\n4Ô∏è‚É£ Login como RH...');
        const rhLogin = await axios.post(`${BASE_URL}/auth/login`, {
            email: 'rh@teste.com',
            password: 'senha123',
        });
        const rhToken = rhLogin.data.access_token;
        console.log('‚úÖ Login RH OK');

        // 5Ô∏è‚É£ Criar crit√©rio espec√≠fico para Frontend
        console.log('\n5Ô∏è‚É£ Criando crit√©rio espec√≠fico para Frontend...');
        const criterioFrontend = await axios.post(
            `${BASE_URL}/criteria`,
            {
                name: 'Conhecimento em React',
                description: 'Dom√≠nio de React e componentes',
                weight: 3.0,
                pillarId: 1,
            },
            {
                headers: { Authorization: `Bearer ${rhToken}` },
            },
        );
        console.log(
            `‚úÖ Crit√©rio Frontend criado: ${criterioFrontend.data.name} (ID: ${criterioFrontend.data.id})`,
        );

        // 6Ô∏è‚É£ Configurar crit√©rio APENAS para Frontend
        console.log('\n6Ô∏è‚É£ Configurando crit√©rio APENAS para Frontend...');
        await axios.post(
            `${BASE_URL}/criteria/track-config`,
            {
                criterionId: criterioFrontend.data.id,
                track: 'Frontend', // APENAS Frontend
                position: 'Desenvolvedor',
                weight: 3.0,
                isActive: true,
            },
            {
                headers: { Authorization: `Bearer ${rhToken}` },
            },
        );
        console.log('‚úÖ Crit√©rio configurado APENAS para Frontend');

        // 7Ô∏è‚É£ Configurar ciclo ativo
        console.log('\n7Ô∏è‚É£ Configurando ciclo ativo...');
        try {
            // Verificar se j√° existe um ciclo ativo
            const existingCycles = await axios.get(`${BASE_URL}/cycle-config`, {
                headers: { Authorization: `Bearer ${rhToken}` },
            });
            console.log('üìã Ciclos existentes:', existingCycles.data.length);

            // Se n√£o h√° ciclos, criar um novo (muito simplificado)
            if (existingCycles.data.length === 0) {
                const cycleConfig = await axios.post(
                    `${BASE_URL}/cycle-config`,
                    {
                        name: '2025.1',
                        description: 'Ciclo de avalia√ß√£o 2025.1',
                        startDate: '2025-01-01T00:00:00Z',
                        endDate: '2025-12-31T23:59:59Z',
                        isActive: true,
                        pillarConfigs: [], // Sem configura√ß√µes de pilares
                        criterionConfigs: [], // Sem crit√©rios por enquanto
                    },
                    {
                        headers: { Authorization: `Bearer ${rhToken}` },
                    },
                );
                console.log('‚úÖ Ciclo ativo criado:', cycleConfig.data.name);
            } else {
                // Se j√° existe um ciclo, ativar o primeiro
                const firstCycle = existingCycles.data[0];
                console.log('‚úÖ Usando ciclo existente:', firstCycle.name);
            }
        } catch (error) {
            console.log(
                '‚ö†Ô∏è Erro ao configurar ciclo:',
                error.response?.data?.message || 'Usando ciclo existente',
            );
        }

        // 8Ô∏è‚É£ Login como Backend
        console.log('\n8Ô∏è‚É£ Login como Backend...');
        const backendLogin = await axios.post(`${BASE_URL}/auth/login`, {
            email: 'backend@teste.com',
            password: 'senha123',
        });
        const backendToken = backendLogin.data.access_token;
        console.log('‚úÖ Login Backend OK');

        // 9Ô∏è‚É£ Tentar fazer autoavalia√ß√£o como Backend usando crit√©rio Frontend (deve falhar)
        console.log('\n9Ô∏è‚É£ Tentando autoavalia√ß√£o Backend com crit√©rio Frontend (deve falhar)...');
        try {
            const avaliacaoBackend = await axios.post(
                `${BASE_URL}/evaluations`,
                {
                    ciclo: '2025.1',
                    colaboradorId: '1', // Backend
                    autoavaliacao: {
                        pilares: [
                            {
                                pilarId: '1',
                                criterios: [
                                    {
                                        criterioId: criterioFrontend.data.id.toString(), // Crit√©rio Frontend!
                                        nota: 4,
                                        justificativa: 'Backend tentando avaliar crit√©rio Frontend',
                                    },
                                ],
                            },
                        ],
                    },
                    avaliacao360: [],
                    mentoring: [],
                    referencias: [],
                },
                {
                    headers: { Authorization: `Bearer ${backendToken}` },
                },
            );
            console.log('‚ùå Backend conseguiu usar crit√©rio Frontend (n√£o deveria!)');
            console.log('Resultado:', avaliacaoBackend.data);
        } catch (error) {
            console.log('‚úÖ Backend N√ÉO conseguiu usar crit√©rio Frontend (esperado!)');
            console.log(`   Erro: ${error.response?.data?.message || error.message}`);
        }

        // üîü Login como Frontend e tentar usar crit√©rio Frontend (deve funcionar)
        console.log('\nüîü Login como Frontend...');
        const frontendLogin = await axios.post(`${BASE_URL}/auth/login`, {
            email: 'frontend@teste.com',
            password: 'senha123',
        });
        const frontendToken = frontendLogin.data.access_token;
        console.log('‚úÖ Login Frontend OK');

        // 1Ô∏è‚É£1Ô∏è‚É£ Tentar fazer autoavalia√ß√£o como Frontend usando crit√©rio Frontend (deve funcionar)
        console.log(
            '\n1Ô∏è‚É£1Ô∏è‚É£ Tentando autoavalia√ß√£o Frontend com crit√©rio Frontend (deve funcionar)...',
        );
        try {
            const avaliacaoFrontend = await axios.post(
                `${BASE_URL}/evaluations`,
                {
                    ciclo: '2025.1',
                    colaboradorId: '2', // Frontend
                    autoavaliacao: {
                        pilares: [
                            {
                                pilarId: '1',
                                criterios: [
                                    {
                                        criterioId: criterioFrontend.data.id.toString(), // Crit√©rio Frontend
                                        nota: 5,
                                        justificativa: 'Frontend avaliando crit√©rio Frontend',
                                    },
                                ],
                            },
                        ],
                    },
                    avaliacao360: [],
                    mentoring: [],
                    referencias: [],
                },
                {
                    headers: { Authorization: `Bearer ${frontendToken}` },
                },
            );
            console.log('‚úÖ Frontend conseguiu usar crit√©rio Frontend!');
            console.log('Resultado:', avaliacaoFrontend.data);
        } catch (error) {
            console.log('‚ùå Frontend N√ÉO conseguiu usar crit√©rio Frontend');
            console.log(`   Erro: ${error.response?.data?.message || error.message}`);
        }

        // ===== RESUMO =====
        console.log('\n\nüìä RESUMO DO TESTE AUTOAVALIA√á√ÉO');
        console.log('==================================');
        console.log('üéØ Objetivo: Testar se autoavalia√ß√£o respeita trilhas');
        console.log('üîµ Backend usando crit√©rio Frontend: ‚ùå Bloqueado (esperado)');
        console.log('üî¥ Frontend usando crit√©rio Frontend: ‚úÖ Permitido (esperado)');
        console.log('');
        console.log('üí° Sistema deve validar que:');
        console.log('   - Backend s√≥ pode usar crit√©rios configurados para Backend');
        console.log('   - Frontend s√≥ pode usar crit√©rios configurados para Frontend');
        console.log('   - Ou permitir crit√©rios gerais para todas as trilhas');
    } catch (error) {
        console.error('‚ùå ERRO GERAL:', error.response?.data || error.message);
    }
}

testeAutoavaliacaoTrilhas();
